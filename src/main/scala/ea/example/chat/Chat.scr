// > mnt/c/Users/Raymond/winroot/home/eey335/code/java/intellij/git/github.com/rhu1/scribble-java-ea-artifact
// ./scribblec-ea.sh c:/Users/Raymond/winroot/home/eey335/code/scala/intellij/git/github.com/rhu1/scribble-scala-ea-artifact/src/main/scala/ea/example/chat/Chat.scr Proto1 -d test/scrib/out
// ./scribblec-ea.sh c:/Users/Raymond/winroot/home/eey335/code/scala/intellij/git/github.com/rhu1/scribble-scala-ea-artifact/src/main/scala/ea/example/chat/Chat.scr Proto2 -d test/scrib/out
// ./scribblec-ea.sh c:/Users/Raymond/winroot/home/eey335/code/scala/intellij/git/github.com/rhu1/scribble-scala-ea-artifact/src/main/scala/ea/example/chat/Chat.scr Proto3 -d test/scrib/out

module ea.example.chat.Chat;


data <scala> "String" from "" as String;


global protocol Proto1(role C, role S) {  // ChatServer(ClientThread, RoomRegistry)
    choice at C {
        LookupRoom(String) from C to S;  // RoomName
        choice at S {
            RoomPID(String) from S to C;  // RoomName, PID => AP port
            //C initiates ChatSession(C, new ChatRoom);  // !!!
        } or {
            RoomNotFound(String) from S to C;  // RoomName
        }
        do Proto1(C, S);
    } or {
        CreateRoom(String) from C to S;  // RoomName
        choice at S {
            CreateRoomSuccess(String) from S to C;  // RoomName
        } or {
            RoomExists(String) from S to C;  // RoomName
        }
        do Proto1(C, S);
    } or {
        ListRooms(String) from C to S;
        RoomList(String) from S to C;  // List<RoomName>
        do Proto1(C, S);
    } or {
        Bye(String) from C to S;  // !!!
    }
}

global protocol Proto2(role C2, role R2) {  // C, R
    choice at C2 {
        OutgoingChatMessage(String) from C2 to R2;
        do Proto2(C2, R2);
    } or {
        LeaveRoom(String) from C2 to R2;
    }
}

global protocol Proto3(role R3, role C3){
    choice at R3 {
        IncomingChatMessage(String) from R3 to C3;
        do Proto3(R3, C3);
    } or {
        Bye(String) from R3 to C3;
    }
}
